void rotatematrix(int **matrix, int m, int n)	
	{
	int i = 0;
	int j = 0;
		for(i = 0; i < m/2; i++)
		{
			int first = i;
			int last = n-1-i;
			for(j = first; j < last; j++)
			{
				int offset = j-first;
				int temp = matrix[first][j];
				matrix[first][j] = matrix[last-offset][first];
				matrix[last-offset][first] = matrix[last][last-offset];
				matrix[last][last-offset] = matrix[j][last];
				matrix[j][last] = temp;
			}
		}
	}
	
void printmatrix(int **matrix, int m, int n)
{
	int i = 0;
	int j = 0;

	for(i = 0; i < m; i++)
	{
		for(j = 0; j < n; j++)
		{
			printf("%d ", matrix[i][j]);
		}
		printf("\n");
	}
	
}

int main()
{
	int m = 4;
	int n = 4;
	int** matrix = (int**) malloc(sizeof(int*)*m);
	int i = 0;
	for(i = 0; i < m; i++)
	{
		matrix[i] = (int*) malloc(sizeof(int)*n);
	}
	i = 0;
	int j = 0;
	int count = 1;

	for(i = 0; i < m;  i++)
	{
		for(j = 0; j < n; j++)
		{
			matrix[i][j] = count;
			count++;
		}
	}

	rotatematrix(matrix, m, n);

	printmatrix(matrix, 4,4);

	_getch();
	return 0;

}
